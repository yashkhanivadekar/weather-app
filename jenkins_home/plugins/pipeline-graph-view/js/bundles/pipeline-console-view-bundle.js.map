{"version":3,"mappings":";m9CAaMA,EAAgBC,gBAA6C,MAAS,EAEtEC,EAA4B,CAChCC,EAAO,QACPA,EAAO,QACPA,EAAO,QACPA,EAAO,SACPA,EAAO,QACPA,EAAO,QACPA,EAAO,SACT,EAEaC,EAAiB,CAAC,CAAE,SAAAC,KAAwC,CACvE,KAAM,CAACC,EAAiBC,CAAkB,EAAIC,WAAmB,EAAE,EAC7D,CAACC,EAAQC,CAAS,EAAIF,WAAS,EAAE,EAEjCG,EAAgBC,GAAgB,CAChCN,EAAgB,SAASM,CAAa,EACxCL,EAAmBD,EAAgB,OAAQO,GAAMA,IAAOD,CAAc,CAAC,EAEvEL,EAAmB,CAAC,GAAGD,EAAiBM,CAAa,CAAC,CAE1D,EAEME,EAAgB,IAAM,CAC1BP,EAAmB,EAAE,CACvB,EAGE,OAAAQ,EAAA,IAACf,EAAc,SAAd,CACC,MAAO,CACL,gBACEM,EAAgB,OAAS,EAAIA,EAAkBJ,EACjD,aAAAS,EACA,cAAAG,EACA,YACGR,EAAgB,OAAS,EAAIA,EAAkBJ,GAC7C,SAAWA,EAAgB,OAChC,OAAAO,EACA,UAAAC,CACF,EAEC,SAAAL,CAAA,CACH,CAEJ,EAEaW,EAAY,IAAyB,CAC1C,MAAAC,EAAUC,aAAWlB,CAAa,EACxC,GAAI,CAACiB,EACG,UAAI,MAAM,gDAAgD,EAE3D,OAAAA,CACT,ECtDME,EAAkBC,EAAA,KACtB,IAAAC,EAAA,IAAM,OAAO,sCAA6C,gEAC5D,EAEA,SAAwBC,GAAM,CAC5B,MAAMC,EAAS,SAAS,eAAe,uBAAuB,EAAG,QAC9D,WAED,OAAAR,MAACS,EACC,UAAAT,MAACU,EAAe,QAAAF,EACd,eAACG,EAAa,SAAS,CAACC,EAAmB,QAAQ,EACjD,eAACvB,EACC,UAAAW,EAAA,IAACa,EACC,UAAAb,EAAA,IAACc,EACC,UAAAd,EAAA,IAACI,EAAgB,IACnB,CACF,GACF,CACF,EACF,GACF,CAEJ,CC9BA,MAAMW,EAAc,SAAS,eAAe,uBAAuB,EACnE,GAAI,CAACA,EAAmB,UAAI,MAAM,iCAAiC,EACnE,MAAMC,EAAOC,aAAWF,CAAW,EAGnCC,EAAK,OAAQhB,MAAAO,EAAA,CAAI,EAAE","names":["FilterContext","createContext","defaultStatuses","Result","FilterProvider","children","visibleStatuses","setVisibleStatuses","useState","search","setSearch","toggleStatus","key","s","resetStatuses","jsx","useFilter","context","useContext","PipelineConsole","lazy","__vitePreload","App","locale","UserPermissionsProvider","LocaleProvider","I18NProvider","ResourceBundleName","UserPreferencesProvider","LayoutPreferencesProvider","rootElement","root","createRoot"],"ignoreList":[],"sources":["../../../frontend/pipeline-console-view/pipeline-console/main/providers/filter-provider.tsx","../../../frontend/pipeline-console-view/app.tsx","../../../frontend/pipeline-console-view/index.tsx"],"sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\n\nimport { Result } from \"../../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\ninterface FilterContextType {\n  visibleStatuses: Result[];\n  toggleStatus: (key: Result) => void;\n  resetStatuses: () => void;\n  allVisible: boolean;\n  search: string;\n  setSearch: (value: string) => void;\n}\n\nconst FilterContext = createContext<FilterContextType | undefined>(undefined);\n\nconst defaultStatuses: Result[] = [\n  Result.running,\n  Result.success,\n  Result.failure,\n  Result.unstable,\n  Result.aborted,\n  Result.skipped,\n  Result.not_built,\n];\n\nexport const FilterProvider = ({ children }: { children: ReactNode }) => {\n  const [visibleStatuses, setVisibleStatuses] = useState<Result[]>([]);\n  const [search, setSearch] = useState(\"\");\n\n  const toggleStatus = (key: Result) => {\n    if (visibleStatuses.includes(key as Result)) {\n      setVisibleStatuses(visibleStatuses.filter((s) => s !== (key as Result)));\n    } else {\n      setVisibleStatuses([...visibleStatuses, key as Result]);\n    }\n  };\n\n  const resetStatuses = () => {\n    setVisibleStatuses([]);\n  };\n\n  return (\n    <FilterContext.Provider\n      value={{\n        visibleStatuses:\n          visibleStatuses.length > 0 ? visibleStatuses : defaultStatuses,\n        toggleStatus,\n        resetStatuses,\n        allVisible:\n          (visibleStatuses.length > 0 ? visibleStatuses : defaultStatuses)\n            .length === defaultStatuses.length,\n        search,\n        setSearch,\n      }}\n    >\n      {children}\n    </FilterContext.Provider>\n  );\n};\n\nexport const useFilter = (): FilterContextType => {\n  const context = useContext(FilterContext);\n  if (!context) {\n    throw new Error(\"useFilter must be used within a FilterProvider\");\n  }\n  return context;\n};\n","import { lazy } from \"react\";\n\nimport {\n  I18NProvider,\n  LocaleProvider,\n  ResourceBundleName,\n} from \"../common/i18n/index.ts\";\nimport { UserPermissionsProvider } from \"../common/user/user-permission-provider.tsx\";\nimport { UserPreferencesProvider } from \"../common/user/user-preferences-provider.tsx\";\nimport { FilterProvider } from \"./pipeline-console/main/providers/filter-provider.tsx\";\nimport { LayoutPreferencesProvider } from \"./pipeline-console/main/providers/user-preference-provider.tsx\";\n\nconst PipelineConsole = lazy(\n  () => import(\"./pipeline-console/main/PipelineConsole.tsx\"),\n);\n\nexport default function App() {\n  const locale = document.getElementById(\"console-pipeline-root\")!.dataset\n    .userLocale!;\n  return (\n    <UserPermissionsProvider>\n      <LocaleProvider locale={locale}>\n        <I18NProvider bundles={[ResourceBundleName.messages]}>\n          <FilterProvider>\n            <UserPreferencesProvider>\n              <LayoutPreferencesProvider>\n                <PipelineConsole />\n              </LayoutPreferencesProvider>\n            </UserPreferencesProvider>\n          </FilterProvider>\n        </I18NProvider>\n      </LocaleProvider>\n    </UserPermissionsProvider>\n  );\n}\n","import { createRoot } from \"react-dom/client\";\n\nimport App from \"./app.tsx\";\n\nconst rootElement = document.getElementById(\"console-pipeline-root\");\nif (!rootElement) throw new Error(\"Failed to find the root element\");\nconst root = createRoot(rootElement);\n\n// Render App\nroot.render(<App />);\n"],"file":"pipeline-console-view-bundle.js"}